#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"

# Redirect output and error to the log file
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Exports
export DATADIR="$GAMEDIR/assets"
export DATAFILE="game.port"
export LD_LIBRARY_PATH="/usr/lib:$GAMEDIR/lib:$GAMEDIR/tools/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export TOOLDIR="$GAMEDIR/tools"
export TMPDIR="$GAMEDIR/tmp"
export PATH="$GAMEDIR/tools:$PATH"

# Permissions
chmod 666 /dev/uinput
chmod 777 "$TOOLDIR/gmKtool.py"
chmod 777 "$TOOLDIR/oggdec"
chmod 777 "$TOOLDIR/oggenc"

cd "$GAMEDIR"

patch_game()
{
    # Patch data.win
    [[ ! -f "$DATADIR/data.win" ]] && echo "data.win missing" && return 1
    xdelta3 -vv -d -s "$DATADIR/data.win" -f "$GAMEDIR/patch/patch.steam" "$DATADIR/game.droid"
    [[ ! $? -eq 0 ]] && echo "xdelta patching failed" && return 1
    echo "xdelta patch successful."
    rm "$DATADIR/data.win"
}

compress_audio() {
    mkdir -p "$TMPDIR"

    # Run the compression tool
    PYTHON=$(which python3)
    echo "Running GMTools on data and audiogroups."
    $PYTHON ./tools/gmKtool.py -vv -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid"

    if [ $? -eq 0 ]; then
        echo "Compression completed successfully."
        mv "$TMPDIR/"* "$DATADIR"
        echo "Moved compressed files to $DATADIR."
        rmdir "$TMPDIR"
        echo "Temporary directory $TMPDIR removed."
        echo "Audio compression applied successfully."
    else
        echo "Audio compression failed."
        echo "Cleaning up temporary directory $TMPDIR."
        rm -rf "$TMPDIR"
    fi
    
    sleep 3
    
    # Find and compress all .ogg files in the /assets directory
    find "$DATADIR" -type f -name "*.ogg" | while read -r file; do
    # Create a temporary file for the compressed version
    temp_file="${file%.ogg}_temp.ogg"

    # Decode the .ogg file and encode it with the specified bitrate
    "$TOOLDIR/oggdec" -o - "$file" | "$TOOLDIR/oggenc" -b 64 -o "$temp_file" -
    if [ $? -eq 0 ]; then
        # Replace the original file with the compressed version if successful
        mv "$temp_file" "$file"
        echo "Compressed: $file to 64 kbps"
    else
        echo "Failed to compress: $file" >&2
        rm -f "$temp_file" # Clean up the temp file in case of error
    fi
    done

    echo "All .ogg files have been processed."
    sleep 3
}

zip_archive() {
    zip -r -0 $DATAFILE ./assets/
    rm -rf ./assets
    mkdir -p saves
}

process_game() {
    # Delete unnecessary files
    rm -rf $DATADIR/.gitkeep $DATADIR/*.exe $DATADIR/*.png 
    echo "Removed unnecessary files"
    sleep 1
    echo "Patching data.win..."
    patch_game
    sleep 1
    echo "Compressing audio..."
    compress_audio
    sleep 1
    echo "Finishing up..."
    zip_archive
    sleep 1
    
    # Final completion message
    echo "Patching process complete!"
}

# Call the function
process_game