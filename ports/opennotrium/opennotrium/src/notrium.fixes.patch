diff --git a/engine.cpp b/engine.cpp
index 0d6cb08..9b8b049 100644
--- a/engine.cpp
+++ b/engine.cpp
@@ -45,6 +45,10 @@ void Engine::System_Start(){
         SDL_GL_SwapWindow(window);
 
         //mousewheel is a bit weird
+        int ix, iy;
+        SDL_GetMouseState(&ix, &iy);
+        mousestate.aX = ix;
+        mousestate.aY = iy;
         mousestate.lZ = 0;
         mousestate.lX = 0;
         mousestate.lY = 0;
@@ -99,6 +103,8 @@ void Engine::System_Start(){
                 if(ignoreMouseMotion > 0){
                     ignoreMouseMotion--;
                 } else {
+                    mousestate.aX = event.motion.x;
+                    mousestate.aY = event.motion.y;
                     mousestate.lX = event.motion.xrel;
                     mousestate.lY = event.motion.yrel;
                 }
@@ -230,6 +236,21 @@ void Engine::System_SaveScreenshot(const std::string& filename){
     Texture_Delete(temptext);
 }
 
+void Engine::mouseButtonReset() {
+    mousestate.btn_left = false;
+    mousestate.btn_middle = false;
+    mousestate.btn_right = false;
+}
+
+bool Engine::warpMouse(int x, int y) {
+    SDL_WarpMouseInWindow(this->window, x, y);
+    int ix, iy;
+    SDL_GetMouseState(&ix, &iy);
+    mousestate.aX = ix;
+    mousestate.aY = iy;
+    return (ix==x && iy==y);
+}
+
 MouseState Engine::getMouseState(){
     return MouseState(mousestate);
 }
diff --git a/engine.h b/engine.h
index 7ab4ad7..1248732 100644
--- a/engine.h
+++ b/engine.h
@@ -15,6 +15,8 @@ bool (*ProgramCallback)(void);
 class MouseState {
 public:
     //position
+    int aX;
+    int aY;
     int lX;
     int lY;
     int lZ; //mousewheel
@@ -91,6 +93,8 @@ public:
     /**
     * Copies relevant stuff into the state. We need to make a copy anyway, so just return the object.
     */
+    void mouseButtonReset();
+    bool warpMouse(int x, int y);
     MouseState getMouseState();
     void ShowCursor(bool state);
 
diff --git a/main.cpp b/main.cpp
index c2d7b41..3308637 100644
--- a/main.cpp
+++ b/main.cpp
@@ -3,6 +3,8 @@
 #include "credits.h"
 
 #include <iostream>
+#include <sys/time.h>
+
 
 // In C++11, isnan is a function, not a macro.
 // If your compiler fails to find std::isnan, try
@@ -161,13 +163,46 @@ bool game_engine::Frame(void)
     //mousex=grim->Mouse_GetPosX();
     //mousey=grim->Mouse_GetPosY();
 
+    struct timeval tv;
+    time_t now_ms;
+    gettimeofday(&tv, NULL);
+    now_ms = (time_t)tv.tv_sec * 1000 + tv.tv_usec / 1000;
+
+    // Try to calibrate mouse (i.e. move mouse position to centre of screen
+    // and check it was set successfully). On some platforms, SDL mouse position
+    // is zero for a few frames after startup. This was an attempt to work round
+    // intermittent mouse failure on Crossmix, but didn't work and is now disabled.
+    bool success;
+    if (mouse_calibration_needed) {
+        success = grim->warpMouse((int)screen_width/2, (int)screen_height/2);
+        if (success) {
+            printf("Mouse position set successfully\n");
+            mouse_calibration_needed = false;
+        } else {
+            printf("Failed to set mouse position\n");
+            if (now_ms > startup_time_ms+750) {
+                printf("Mouse position not set after 750ms, giving up\n");
+                mouse_calibration_needed = false;
+            }
+        }
+    }
+
+    // Suppress all mouse button presses during first 500ms. This works round
+    // phantom mouse presses on Crossmix and ArkOS
+    if (now_ms < startup_time_ms+500) {
+        grim->mouseButtonReset();
+        printf("Resetting mouse buttons\n");
+    }
+
     //mouse
     mousestate2=mousestate;
     mousestate = grim->getMouseState();
 
     if(!input_override){
-        mousex= mousex + (mousestate.lX+mousestate2.lX)*mouse_speed;
-        mousey= mousey + (mousestate.lY+mousestate2.lY)*mouse_speed;
+        // mousex= mousex + (mousestate.lX+mousestate2.lX)*mouse_speed;
+        // mousey= mousey + (mousestate.lY+mousestate2.lY)*mouse_speed;
+        mousex = mousestate.aX;
+        mousey = mousestate.aY;
         mouse_wheel=mousestate.lZ;
 
         mouse_left2=mouse_left;
@@ -183,8 +218,10 @@ bool game_engine::Frame(void)
         if(mousey>screen_height)mousey=screen_height;
     }
 
-    override_mousex= override_mousex + (mousestate.lX+mousestate2.lX)*mouse_speed;
-    override_mousey= override_mousey + (mousestate.lY+mousestate2.lY)*mouse_speed;
+    // override_mousex= override_mousex + (mousestate.lX+mousestate2.lX)*mouse_speed;
+    // override_mousey= override_mousey + (mousestate.lY+mousestate2.lY)*mouse_speed;
+    override_mousex = mousestate.aX;
+    override_mousey = mousestate.aY;
     override_mouse_wheel=mousestate.lZ;
 
     override_mouse_left2=override_mouse_left;
@@ -681,6 +718,12 @@ void game_engine::initialize_game(void){//initialize game variables
         elapsed3[i]=15;
     }*/
 
+    struct timeval tv;
+    gettimeofday(&tv, NULL);
+    startup_time_ms = (time_t)tv.tv_sec * 1000 + tv.tv_usec / 1000;
+
+    mouse_calibration_needed = false;
+
     //load setup
     load_setup("data/setup.dat");
 
@@ -723,10 +766,12 @@ void game_engine::initialize_game(void){//initialize game variables
     key_escape2=false;
     key_enter=false;
     key_enter2=false;
-    mousex=screen_width/2;
-    mousey=screen_height/2;
-    override_mousex=screen_width/2;
-    override_mousey=screen_height/2;
+    grim->warpMouse(screen_width/2, screen_height/2);
+    mousestate = grim->getMouseState();
+    mousex = mousestate.aX;
+    mousey = mousestate.aY;
+    override_mousex=mousestate.aX;
+    override_mousey=mousestate.aY;
     mouse_left=false;
     mouse_left2=false;
     mouse_right=false;
@@ -1261,8 +1306,8 @@ void game_engine::render_map(void){//renders game map
         }
     }
     else{
-        mousex=screen_height/2;
-        mousey=screen_width/2;
+        mousex=screen_width/2;
+        mousey=screen_height/2;
     }
 
 
@@ -1379,7 +1424,7 @@ void game_engine::draw_map_grid(void){//renders map grid
 
         grim->Quads_Begin();*/
         for(int i=screen_start_x;i<screen_end_x;i++){
-            for(int j=screen_start_y;j<screen_end_y;j++){
+            for(int j=screen_start_y;j<screen_end_y+1;j++){
 
                 //advance terrain frames
                 if(mod.terrain_types[map_main->at(i,j).terrain_type].terrain_frames.size()>1){
@@ -12102,19 +12147,19 @@ void game_engine::create_menu_items(void){
         menu_system[3].item[d].height=25;
 
         //mouse speed
-        d++;
-        menu_system[3].item[d].text="Mouse Speed:";
-        menu_system[3].item[d].help=" ";
-        menu_system[3].item[d].effect=-1;
-        menu_system[3].item[d].text_size=1.5f;
-        menu_system[3].item[d].height=25;
-        d++;
-        menu_system[3].item[d].text="slider";
-        menu_system[3].item[d].help="Drag slider to adjust.";
-        menu_system[3].item[d].effect=10;
-        menu_system[3].item[d].effect_parameter=mouse_speed-0.5f;
-        menu_system[3].item[d].text_size=1.5f;
-        menu_system[3].item[d].height=25;
+        // d++;
+        // menu_system[3].item[d].text="Mouse Speed:";
+        // menu_system[3].item[d].help=" ";
+        // menu_system[3].item[d].effect=-1;
+        // menu_system[3].item[d].text_size=1.5f;
+        // menu_system[3].item[d].height=25;
+        // d++;
+        // menu_system[3].item[d].text="slider";
+        // menu_system[3].item[d].help="Drag slider to adjust.";
+        // menu_system[3].item[d].effect=10;
+        // menu_system[3].item[d].effect_parameter=mouse_speed-0.5f;
+        // menu_system[3].item[d].text_size=1.5f;
+        // menu_system[3].item[d].height=25;
 
 
         //sound volume
@@ -13059,8 +13104,10 @@ void game_engine::change_map(int move, float new_x, float new_y, bool move_enemi
     real_camera_x=suggested_camera_x;
     real_camera_y=suggested_camera_y;
 
-    mousex=screen_width/2;
-    mousey=screen_height/2;
+    grim->warpMouse(screen_width/2, screen_height/2);
+    mousestate = grim->getMouseState();
+    mousex = mousestate.aX;
+    mousey = mousestate.aY;
 
     //if(move_enemies){
         int player_controlled_creature_was=player_controlled_creature;
@@ -14565,6 +14612,7 @@ void game_engine::disable_input_override(void){
         input_override=false;
         mouse_left=false;
         mouse_left2=false;
+        grim->warpMouse((int)override_mousex, (int)override_mousey);
         mousex=override_mousex;
         mousey=override_mousey;
         key_escape=false;
diff --git a/main.h b/main.h
index ee538e6..6ccf5e8 100644
--- a/main.h
+++ b/main.h
@@ -29,6 +29,7 @@
 #include "text_output.h"
 #include "keys.h"
 #include "func.h"
+#include <sys/time.h>
 
 #ifdef _DEBUG
 
@@ -118,6 +119,9 @@ protected:
     std::vector <timer_base> terrain_timers;
     std::vector <timer_base> rain_effect_timers;
 
+    time_t startup_time_ms;
+    bool mouse_calibration_needed;
+
     float elapsed,elapsed2,elapsed3[31];//timer for fps
     bool perf_flag;        // Timer Selection Flag
     double time_factor;    // Time Scaling Factor
