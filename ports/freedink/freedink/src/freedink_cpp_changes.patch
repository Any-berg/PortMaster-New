--- freedink/src/AppFreeDinkedit.cpp	2024-09-09 21:29:45.050679748 +0000
+++ freedink-109.6/src/AppFreeDinkedit.cpp	1970-01-01 00:00:00.000000000 +0000
@@ -1,8 +0,0 @@
-#ifdef HAVE_CONFIG_H
-#include <config.h>
-#endif
-
-#include "AppFreeDinkedit.h"
-#include "live_sprites_manager.h"
-#include "gfx_sprites.h"
-#include "sfx.h"
--- freedink/src/fastfile.cpp	2024-09-09 21:29:45.050679748 +0000
+++ freedink-109.6/src/fastfile.cpp	2024-09-09 20:06:45.232964813 +0000
@@ -215,7 +215,7 @@
 }
 
 
-void *
+struct FF_Handle *
 FastFileOpen(char *name)
 {
   struct FF_Handle *i;
@@ -252,7 +252,7 @@
 		    i->len = 0;
 		  else
 		    i->len = next_off - i->off;
-		  return (void*)i;
+		  return i;
 		}
 	    }
 	  return NULL;
--- freedink/src/ImageLoader.cpp	2024-09-09 21:29:45.050679748 +0000
+++ freedink-109.6/src/ImageLoader.cpp	2024-09-09 20:08:26.410790388 +0000
@@ -1,3 +1,5 @@
+#include "config.h"
+
 #include "ImageLoader.h"
 
 #include "SDL.h"
@@ -53,9 +55,11 @@
 	SDL_Surface *converted = SDL_CreateRGBSurface(0, image->w, image->h, 8, 0,0,0,0);
 	SDL_SetPaletteColors(converted->format->palette, GFX_ref_pal, 0, 256);
 	SDL_BlitSurface(image, NULL, converted, NULL);
-	Uint32 key;
-	if (SDL_GetColorKey(image, &key) == 0)
+	if (SDL_HasColorKey(image)) {
+		Uint32 key;
+		SDL_GetColorKey(image, &key);
 		SDL_SetColorKey(converted, SDL_TRUE, key);
+	}
 	SDL_FreeSurface(image);
 	/* Disable palette conversion in future blits */
 	SDL_SetPaletteColors(converted->format->palette, blitFormat->format->palette->colors, 0, 256);
--- freedink/src/IOGfxSurfaceSW.cpp	2024-09-09 21:29:45.050679748 +0000
+++ freedink-109.6/src/IOGfxSurfaceSW.cpp	2024-09-09 20:08:26.410790388 +0000
@@ -1,3 +1,5 @@
+#include "config.h"
+
 #include "IOGfxSurfaceSW.h"
 
 #include "SDL.h"
@@ -66,9 +68,12 @@
 	 report submitted to the author: SDL_gfx adds transparency to
 	 non-transparent surfaces) */
 		Uint8 r, g, b, a;
-		Uint32 colorkey;
-		int colorkey_enabled = (SDL_GetColorKey(src_surf, &colorkey) != -1);
-		SDL_GetRGBA(colorkey, src_surf->format, &r, &g, &b, &a);
+		int colorkey_enabled = SDL_HasColorKey(src_surf);
+		if (colorkey_enabled) {
+				Uint32 colorkey;
+				SDL_GetColorKey(src_surf, &colorkey);
+				SDL_GetRGBA(colorkey, src_surf->format, &r, &g, &b, &a);
+		}
 
 		SDL_SetColorKey(scaled, colorkey_enabled,
 				SDL_MapRGBA(scaled->format, r, g, b, a));
--- freedink/src/IOGfxDisplayGL2.cpp	2024-09-09 21:29:45.050679748 +0000
+++ freedink-109.6/src/IOGfxDisplayGL2.cpp	2024-09-09 20:03:23.977489013 +0000
@@ -579,10 +579,11 @@
 
 	// Save transparency color
 	SDL_Color colorkey = {0,0,0, 0};
-	Uint32 key;
-	if (SDL_GetColorKey(surf, &key) == -1) {
+	if (!SDL_HasColorKey(surf)) {
 		colorkey.a = SDL_ALPHA_OPAQUE; // no colorkey
 	} else {
+		Uint32 key;
+		SDL_GetColorKey(surf, &key);
 		if (truecolor)
 			SDL_GetRGBA(key, surf->format, &colorkey.r, &colorkey.g, &colorkey.b, &colorkey.a);
 		else
--- freedink/src/gfx_fonts.cpp	2024-09-09 21:29:45.060679745 +0000
+++ freedink-109.6/src/gfx_fonts.cpp	2024-09-09 20:01:35.088288008 +0000
@@ -134,7 +134,7 @@
 			       1, FONT_SIZE);
   if (system_font == NULL)
     {
-      log_error("Failed to load built-in 'vgasys.fon' font: %s", TTF_GetError());
+      log_error("Failed to load built-in 'vgasys.fon' font: %s", SDL_GetError());
       return -1;
     }
   setup_font(system_font);
@@ -293,10 +293,10 @@
  */
 void setup_font(TTF_Font *font)
 {
-  char *familyname = TTF_FontFaceFamilyName(font);
+  const char *familyname = TTF_FontFaceFamilyName(font);
   if(familyname)
     log_info("The family name of the face in the font is: %s", familyname);
-  char *stylename = TTF_FontFaceStyleName(font);
+  const char *stylename = TTF_FontFaceStyleName(font);
   if(stylename)
     log_info("The name of the face in the font is: %s", stylename);
   log_info("The font max height is: %d", TTF_FontHeight(font));
--- freedink/src/IOGfxGLFuncs.cpp	2024-09-09 21:29:45.050679748 +0000
+++ freedink-109.6/src/IOGfxGLFuncs.cpp	2024-09-09 20:08:26.410790388 +0000
@@ -20,6 +20,8 @@
  * <http://www.gnu.org/licenses/>.
  */
 
+#include "config.h"
+
 #include "IOGfxGLFuncs.h"
 
 #include "SDL.h"
--- freedink/src/IOGfxPrimitivesSW.cpp	2024-09-09 21:29:45.050679748 +0000
+++ freedink-109.6/src/IOGfxPrimitivesSW.cpp	2024-09-09 20:08:26.410790388 +0000
@@ -1,3 +1,5 @@
+#include "config.h"
+
 #include "SDL.h"
 #include "SDL_image.h"
 #include "SDL2_rotozoom.h"
--- freedink/src/IOGfxSurface.cpp	2024-09-09 21:29:45.050679748 +0000
+++ freedink-109.6/src/IOGfxSurface.cpp	2024-09-09 20:08:26.410790388 +0000
@@ -1,3 +1,5 @@
+#include "config.h"
+
 #include "IOGfxSurface.h"
 
 IOGfxSurface::IOGfxSurface(int w, int h)
--- freedink/src/input.cpp	2024-09-09 21:29:45.060679745 +0000
+++ freedink-109.6/src/input.cpp	2024-09-09 20:01:35.088288008 +0000
@@ -91,7 +91,6 @@
 
   // TODO: don't attempt to simulate mouse events from touch events -
   // fake mouse events often are de-centered
-  SDL_SetHint(SDL_HINT_ANDROID_SEPARATE_MOUSE_AND_TOUCH, "0");
 
   /* Touch devices */
   {
--- freedink/src/sfx.cpp	2024-09-09 21:29:45.060679745 +0000
+++ freedink-109.6/src/sfx.cpp	2024-09-09 20:07:24.859944492 +0000
@@ -806,12 +806,10 @@
       else
 	log_info("Audio music decoder: %s", Mix_GetMusicDecoder(i));
     }
-    if (!ogg_available)
-      log_error("Audio music decoder: no Ogg support");
 
-    int available;
     /* Don't mess with loading/unloading too much */
     /*
+    int available;
     available = Mix_Init(MIX_INIT_MOD);     // libmikmod
     log_info("Audio dynload: MOD        %s", available ? "ok" : Mix_GetError());
     available = Mix_Init(MIX_INIT_MODPLUG); // libmodplug
@@ -824,10 +822,10 @@
     log_info("Audio dynload: MP3        %s", available ? "ok" : Mix_GetError());
     Mix_Quit();
     */
-    available = Mix_Init(MIX_INIT_OGG);
-    log_info("Audio dynload: OGG: %s", available ? "ok" : Mix_GetError());
-    if (!available)
-      log_error("Audio dynload: no Ogg support");
+    ogg_available = Mix_Init(MIX_INIT_OGG);
+    log_info("Audio dynload OGG: %s", ogg_available ? "ok" : Mix_GetError());
+    if (!ogg_available)
+      log_error("Audio music decoder: no Ogg support");
 
     // TODO: test MOD support (btw does mikmod and modplug conflict?)
   }
@@ -931,6 +929,7 @@
      the Chunk was loaded via Mix_QuickLoad_RAW() - which is a good
      thing since fake_buf is shared by all Chunks. We still need to
      free the Chunk when it's done playing. */
+  /* FIXME https://bugs.launchpad.net/ubuntu/+source/freedink/+bug/2009960
   Mix_Chunk *chunk = Mix_GetChunk(channel);
   if (chunk == NULL)
     {
@@ -938,6 +937,7 @@
       exit(1);
     }
   Mix_FreeChunk(chunk);
+  */
   channelinfo[channel].finished = 0;
   channelinfo[channel].looping = 0;
   channelinfo[channel].cur_sound = -1;
