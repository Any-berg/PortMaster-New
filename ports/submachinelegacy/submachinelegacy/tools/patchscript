#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"
LOGERR="$GAMEDIR/patch_error.txt"

# Redirect output and error to the log file
rm -rf $LOGFILE $LOGERR
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Exports
export DATADIR="$GAMEDIR/assets"
export DATAFILE="submachinelegacy.port"
export LD_LIBRARY_PATH="/usr/lib:$GAMEDIR/lib:$GAMEDIR/tools/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export TOOLDIR="$GAMEDIR/tools"
export TMPDIR="$GAMEDIR/tmp"
export PATH="$GAMEDIR/tools:$PATH"

PYTHON=$(which python3)

# Permissions
chmod 666 /dev/uinput
chmod 777 "$TOOLDIR/gmKtool.py"
chmod 777 "$TOOLDIR/oggenc"
chmod 777 "$TOOLDIR/oggdec"

cd "$GAMEDIR"

prepare_files() {
    # Delete unnecessary files
    rm -rf "$DATADIR"/*.exe "$DATADIR"/*.dll "$DATADIR"/.gitkeep || { echo "Failed to remove unnecessary files."; return 1; }

    # Default to 2 cores if nproc isn't available
    num_cores=2

    # Check if nproc is available
    if command -v nproc >/dev/null 2>&1; then
        num_cores=$(nproc)
    fi

    # Check if xargs is available
    if command -v xargs >/dev/null 2>&1; then
        echo "Using xargs for parallel processing with $num_cores processes."
        find "$DATADIR" -type f -iname '*.png' -print0 | xargs -0 -n 1 -P "$num_cores" -I{} sh -c '
            echo "Compressing: {}"
            pngquant --ext .png --force "{}" || { echo "Failed to compress: {}"; return 1; }
        ' || { echo "Failed to run xargs or pngquant."; return 1; }
    else
        echo "xargs not found, proceeding with normal processing."
        find "$DATADIR" -type f -iname '*.png' -exec sh -c '
            echo "Compressing: {}"
            pngquant --ext .png --force "{}" || { echo "Failed to compress: {}"; return 1; }
        ' \; || { echo "Failed to run find or pngquant."; return 1; }
    fi
}

apply_xdelta() {
    # Check if the data.win file exists and apply xdelta
    if [ -f "$DATADIR/data.win" ]; then
        output=$($controlfolder/xdelta3 -d -s "$DATADIR/data.win" -f "$TOOLDIR/patches/submachinelegacy.xdelta" "$DATADIR/game.droid" 2>&1)
        if [ $? -eq 0 ]; then
            echo "Patch applied successfully"
            echo "$output"
            rm "$DATADIR/data.win" || { echo "Failed to remove data.win."; return 1; }
        else
            echo "Failed to apply patch"
            echo "$output"
            mv $LOGFILE $LOGERR || { echo "Failed to move log file to error log."; return 1; }
            return 1
        fi
    else
        echo "No data.win file found to patch!"
    fi
}

compress_audio() {
    echo "Compressing audio..."
    # Clear out the temporary directory
    mkdir -p "$TMPDIR" || { echo "Failed to create temporary directory $TMPDIR."; return 1; }
    rm -rf $TMPDIR/* || { echo "Failed to clean temporary directory $TMPDIR."; return 1; }
    
    # Ensure game.droid
    if [ -f "$DATADIR/data.win" ]; then
        mv "$DATADIR/data.win" "$DATADIR/game.droid" || { echo "Failed to rename data.win to game.droid."; return 1; }
    fi

    # Run the compression tool
    echo "Running GMTools on data and audiogroups."
    $PYTHON $TOOLDIR/gmKtool.py -vv -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid" || { echo "GMTools compression failed."; return 1; }

    if [ $? -eq 0 ]; then
        echo "Compression completed successfully."
        mv "$TMPDIR/"* "$DATADIR" || { echo "Failed to move compressed files to $DATADIR."; return 1; }
        echo "Moved compressed files to $DATADIR."
        rm -rf "$TMPDIR" || { echo "Failed to remove temporary directory $TMPDIR."; return 1; }
        echo "Temporary directory $TMPDIR removed."
        echo "Audio compression applied successfully."
        sleep 1
    else
        echo "Audio compression failed."
        echo "Cleaning up temporary directory $TMPDIR."
        rm -rf "$TMPDIR" || { echo "Failed to remove temporary directory $TMPDIR."; return 1; }
        sleep 1
    fi
}

zip_archive() {
        echo "Finishing up..."
        zip -r -0 $DATAFILE ./assets/ || { echo "Failed to create zip archive."; return 1; }
        mkdir -p saves || { echo "Failed to create saves directory."; return 1; }
        rm -rf $DATADIR/* || { echo "Failed to clean DATADIR."; return 1; }
        sleep 1
}

process_game() {
    prepare_files || { echo "Patching process failed."; exit 1; }
    # Apply fullscreen patch if not 16:9 aspect
    # if [ "$PATCH" = "1" ]; then
    #     apply_xdelta || { echo "Patching process failed."; exit 1; }
    # fi
    compress_audio || { echo "Patching process failed."; exit 1; }
    zip_archive || { echo "Patching process failed."; exit 1; }
	
    # Final completion message
    echo "Patching process complete!"
}

process_game