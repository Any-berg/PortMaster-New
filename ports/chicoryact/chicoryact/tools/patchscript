#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"
START_TIME=$(date +%s)

# Redirect output and error to the log file
rm -rf $LOGFILE $LOGERR
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Exports
export DATADIR="$GAMEDIR/assets"
export LICENSEDIR="$GAMEDIR/licenses/pizzatower"
export DATAFILE="$GAMEDIR/game.port"
export TOOLDIR="$GAMEDIR/tools"
export TMPDIR="$GAMEDIR/tmp"
export PATH="$GAMEDIR/tools:$PATH"

# Permissions
chmod 666 /dev/uinput
chmod 777 "$TOOLDIR/gmKtool.py"
chmod 777 "$TOOLDIR/oggenc"
chmod 777 "$TOOLDIR/oggdec"

cd "$GAMEDIR"

# Set up trap for cleaning TMPDIR on exit
trap 'rm -rf "$TMPDIR"; echo "Cleaned up temporary files." >> "$LOGFILE"' 0

# Attempt to get SAVEDIR from gmloader.json using jq
if command -v jq >/dev/null 2>&1; then
    SAVEDIR=$(jq -r '.save_dir // empty' "$GAMEDIR/gmloader.json" 2>/dev/null)
else
    SAVEDIR="$GAMEDIR/saves"
fi

# Bail if the dotnet runtime is missing or wasn't mounted
if ! command -v dotnet >/dev/null 2>&1; then
    echo "Dotnet is required but not installed. Please install the runtime."
    echo "Patching process failed."
    exit 1
fi

prepare_assets() {
    # Move game contents to $DATADIR
	if [ -d "$GAMEDIR/depot_1123452" ]; then
    echo "Found depot_1123452. Moving files..."

		if [ -d "$GAMEDIR/depot_1123452/Mac/Chicory_A_Colorful_Tale.app/Contents/Resources" ]; then
			mv "$GAMEDIR/depot_1123452/Mac/Chicory_A_Colorful_Tale.app/Contents/Resources"/* "$DATADIR"/
			echo "Files moved to $DATADIR."

			rm -rf "$GAMEDIR/depot_1123452" "$GAMEDIR/Drop the depot_1123452 folder here.txt"
			echo "Deleted depot_1123452."
		else
			echo "Source directory does not exist: $GAMEDIR/depot_1123452/Mac/Chicory_A_Colorful_Tale.app/Contents/Resources"
		fi
	else
		echo "depot_1123452 folder not found in $GAMEDIR."
	fi
	
	# Delete files we don't need
	rm -rf "$DATADIR"/*.exe "$DATADIR"/*.dll "$DATADIR"/*.png "$DATADIR"/.gitkeep 
	
}

# Externalize game textures with compression
dump_textures() {
    # Purge cache before operations
    rm -rf "$TMPDIR/"*
    
    # Begin texture operations
    dotnet "$TOOLDIR/utmt-cli/UndertaleModCli.dll" \
        dump "$DATADIR/game.ios" \
        -e "$DATADIR/textures" "$DATADIR/game.droid"

    if [ $? -ne 0 ]; then
        echo "[DOTNET]: Patch failed to apply."
        exit 1
    else
        rm -f "$DATADIR/game.ios"
        mv "$DATADIR/textures/" "$SAVEDIR/textures/"
        [ -d "$TMPDIR" ] && rm -rf "$TMPDIR"/*
    fi
	
	sleep 1
}

# Function to remove temporary swap file
remove_swap() {
    local swap_file="$GAMEDIR/temp_swap"
    
    if [ -f "$swap_file" ]; then
        echo "Removing temporary swap file..."
        if command -v "$ESUDO" >/dev/null 2>&1; then
            $ESUDO swapoff "$swap_file" 2>/dev/null || true
        else
            swapoff "$swap_file" 2>/dev/null || true
        fi
        rm -f "$swap_file"
        echo "Temporary swap file removed"
    fi
}


compress_audio() {
    echo "Compressing audio..."
    # Clear out the temporary directory
    mkdir -p "$TMPDIR"
    rm -rf $TMPDIR/*
    # Run the compression tool
    echo "Running GMTools on data and audiogroups."
    $PYTHON $TOOLDIR/gmKtool.py -vv -m 0 -r -q -1 -d "$TMPDIR" "$DATADIR/game.droid"
    if [ $? -eq 0 ]; then
        echo "Compression completed successfully."
        mv "$TMPDIR/"* "$DATADIR"
        echo "Moved compressed files to $DATADIR."
        rm -rf "$TMPDIR"
        echo "Temporary directory $TMPDIR removed."
        echo "Audio compression applied successfully."
        sleep 1
    else
        echo "Audio compression failed."
        echo "Cleaning up temporary directory $TMPDIR."
        rm -rf "$TMPDIR"
        sleep 1
    fi
	
	sleep 3
	
	# Find and compress all .ogg files
	find "$DATADIR" -type f -name "*.ogg" -print0 | xargs -0 -P 4 -I {} bash -c '
    file="$1"
    temp_file="${file%.ogg}_temp.ogg"
    current_time=$(date "+%H:%M:%S")
    if { "$TOOLDIR/oggdec" -o - "$file" 2>/dev/null; } | { "$TOOLDIR/oggenc" -Q -q -1 -o "$temp_file" - 2>/dev/null; }; then
        mv "$temp_file" "$file"
        echo "[$current_time] Compressed: $file to quality -1.00"
    else
        echo "[$current_time] Failed to compress: $file" >&2
        rm -f "$temp_file"
    fi
	' _ {}
	
	echo "All .ogg files have been processed."
	sleep 3
}

# Add assets to $DATAFILE
zip_archive() {
        echo "Finishing up..."
        zip -r -0 $DATAFILE ./assets/
        rm -rf $DATADIR/*
        sleep 1
}

# Create install completion flag
install_complete() {
	touch "install_completed"
    # Measure time to complete
	END_TIME=$(date +%s)
    DURATION=$((END_TIME - START_TIME))
    echo "Script completed in $DURATION seconds"
	echo "Installation completed successfully!"
	echo "-----------------------------"
	echo "Process finished at: $(date)"
}

# Main calls
process_game() {
    echo "Heads up: This process uses a lot of battery."
    echo "Make sure your device is charged or plugged in!"
	sleep 5
	prepare_assets || { echo "Patching process failed."; exit 1; }
    dump_textures || { echo "Patching process failed."; exit 1; }
	remove_swap
	compress_audio || { echo "Patching process failed."; exit 1; }
    zip_archive || { echo "Patching process failed."; exit 1; }
    install_complete
	sleep 1
}

# Call the function
process_game