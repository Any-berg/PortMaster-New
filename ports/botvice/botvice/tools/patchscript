#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"

# Redirect output and error to the log file
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Exports
export DATADIR="$GAMEDIR/assets"
export DATAFILE="game.port"
export LD_LIBRARY_PATH="/usr/lib:$GAMEDIR/lib:$GAMEDIR/tools/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export TOOLDIR="$GAMEDIR/tools"
export TMPDIR="$GAMEDIR/tmp"
export PATH="$controlfolder:$GAMEDIR/tools:$PATH"

# Permissions
chmod 666 /dev/uinput
chmod 777 "$TOOLDIR/gmKtool.py"
chmod 777 "$TOOLDIR/oggenc"
chmod 777 "$TOOLDIR/oggdec"

cd "$GAMEDIR"

remove_files() {
    # Delete unnecessary files
    rm -rf $DATADIR/*.png $DATADIR/*.yydebug $DATADIR/.gitkeep
	echo "Removed unnecessary files"
    sleep 1
}

apply_xdeltas() {
# If "$DATADIR/game.unx" exists and matches the checksum of the GOG or Steam versions
    if [ -f "$DATADIR/game.unx" ]; then
        checksum=$(md5sum "$DATADIR/game.unx" | awk '{print $1}')
		echo "patching game.unx"
    
        # Checksum for the Itch version
        if [ "$checksum" = "6b142ac0c2ee8f420536c0b6e3a4dd57" ]; then
            $ESUDO xdelta3 -d -s $DATADIR/game.unx -f $TOOLDIR/patch/botviceitch.xdelta $DATADIR/game.droid && \
            rm $DATADIR/game.unx
            echo "Itch.io game.unx has been patched"
        # Checksum for the Steam version
        elif [ "$checksum" = "3fe30a5ad65b690df8695c1d19f9735b" ]; then
            $ESUDO xdelta3 -d -s $DATADIR/game.unx -f $TOOLDIR/patch/botvicesteam.xdelta $DATADIR/game.droid && \
            rm $DATADIR/game.unx
 	        echo "Steam game.unx has been patched"
        else
            echo "Error: MD5 checksum of game.unx does not match any expected version."
			exit 1
        fi
    else    
        echo "Missing game.unx in $DATADIR folder or game has been patched."
    fi
	
	# If "$DATADIR/audiogroup1.dat" exists and matches the checksum of the Itch.io version
    if [ -f "$DATADIR/audiogroup1.dat" ]; then
        checksum=$(md5sum "$DATADIR/audiogroup1.dat" | awk '{print $1}')
    
        # Checksum for the Itch.io audiogroup1.dat version
        if [ "$checksum" = "2ff52611327de50e195e3043f6b88969" ]; then
            $ESUDO xdelta3 -d -s $DATADIR/audiogroup1.dat -f $TOOLDIR/patch/audiogroup1.xdelta $DATADIR/audiogroup1patched.dat && \
            rm $DATADIR/audiogroup1.dat
            mv $DATADIR/audiogroup1patched.dat $DATADIR/audiogroup1.dat
            echo "Itch.io audiogroup1.dat has been patched."
        fi
    else    
        echo "Missing audiogroup1.dat in $DATADIR folder or Steam files detected."
    fi
	
	# If "$DATADIR/audiogroup2.dat" exists and matches the checksum of the Itch.io version
    if [ -f "$DATADIR/audiogroup2.dat" ]; then
        checksum=$(md5sum "$DATADIR/audiogroup2.dat" | awk '{print $1}')
    
        # Checksum for the Itch.io audiogroup2.dat version
        if [ "$checksum" = "6c9f8c441e9ef3f32f099ef2fe583f75" ]; then
            $ESUDO xdelta3 -d -s $DATADIR/audiogroup2.dat -f $TOOLDIR/patch/audiogroup2.xdelta $DATADIR/audiogroup2patched.dat && \
            rm $DATADIR/audiogroup2.dat
            mv $DATADIR/audiogroup2patched.dat $DATADIR/audiogroup2.dat
            echo "Itch.io audiogroup2.dat has been patched."
        fi
    else    
        echo "Missing audiogroup2.dat in $DATADIR folder or Steam files detected."
    fi
}

compress_audio() {
    echo "Compressing audio..."
    # Clear out the temporary directory
    mkdir -p "$TMPDIR"
    rm -rf $TMPDIR/*

    # Run the compression tool
    echo "Running GMTools on data and audiogroups."
    $PYTHON $TOOLDIR/gmKtool.py -vv -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid"

    if [ $? -eq 0 ]; then
        echo "Compression completed successfully."
        mv "$TMPDIR/"* "$DATADIR"
        echo "Moved compressed files to $DATADIR."
        rm -rf "$TMPDIR"
        echo "Temporary directory $TMPDIR removed."
        echo "Audio compression applied successfully."
        sleep 1
    else
        echo "Audio compression failed."
        echo "Cleaning up temporary directory $TMPDIR."
        rm -rf "$TMPDIR"
        sleep 1
    fi
}

zip_archive() {
        zip -r -0 $DATAFILE ./assets/
        rm -rf ./assets
        mkdir -p saves
}

install_complete() {
# Create install completion flag
touch "install_completed"
echo "Installation completed successfully!"
echo "-----------------------------"
echo "Process finished at: $(date)"
}

process_game() {
    # Delete unnecessary files
    remove_files
	sleep 1
    apply_xdeltas
    sleep 1
    echo "Compressing audio..."
    compress_audio
    sleep 1
    echo "Finishing up..."
    zip_archive
    sleep 1
    install_complete
}

# Call the function
process_game