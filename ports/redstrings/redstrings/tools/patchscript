#!/bin/bash

# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"
LOGERR="$GAMEDIR/patch_error.txt"

# Redirect output and error to the log file
rm -rf $LOGFILE $LOGERR
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Exports
export DATADIR="$GAMEDIR/assets"
export DATAFILE="redstrings.port"
export LD_LIBRARY_PATH="/usr/lib:$GAMEDIR/lib:$GAMEDIR/tools/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export TOOLDIR="$GAMEDIR/tools"
export TMPDIR="$GAMEDIR/tmp"
export PATH="$GAMEDIR/tools:$PATH"

PYTHON=$(which python3)

# Permissions
chmod 666 /dev/uinput

cd "$GAMEDIR"

prepare_files() {
    # Extract the GOG installer if present and remove unnecessary files
	if [ -f "$DATADIR/the_red_strings_club_20180122_ch_update_40932.sh" ]; then
	mkdir $DATADIR/temp
	unzip -o "$DATADIR/the_red_strings_club_20180122_ch_update_40932.sh" "data/noarch/game/assets/*" -d "$DATADIR/temp"
	mv -f $DATADIR/temp/data/noarch/game/assets/* $DATADIR/
		echo "GOG files extracted"
	fi
	rm -rf $DATADIR/*.exe $DATADIR/*.dll $DATADIR/*.sh $DATADIR/temp
		echo "Unnecessary files removed"
    
}

apply_xdelta() {
    # Check if the data.win file exists and apply xdelta
    if [ -f "$DATADIR/data.win" ]; then
        output=$(xdelta3 -d -s "$DATADIR/data.win" -f "$TOOLDIR/patchsteam.xdelta" "$DATADIR/game.droid" 2>&1)
        if [ $? -eq 0 ]; then
            echo "Patch for Steam version applied successfully"
            echo "$output"
            rm "$DATADIR/data.win"
        else
            echo "Failed to apply patch"
            echo "$output"
            exit 1
        fi
	elif [ -f "$DATADIR/game.unx" ]; then
        output=$(xdelta3 -d -s "$DATADIR/game.unx" -f "$TOOLDIR/patchgog.xdelta" "$DATADIR/game.droid" 2>&1)
        if [ $? -eq 0 ]; then
            echo "Patch for GOG version applied successfully"
            echo "$output"
            rm "$DATADIR/game.unx"
        else
            echo "Failed to apply patch"
            echo "$output"
            exit 1
        fi
	
    else
        echo "No compatible game files found to patch!"
    fi
}


zip_archive() {
        echo "Finishing up..."
        zip -r -0 $DATAFILE ./assets/
        rm -rf $DATADIR
        sleep 1
}

process_game() {
    prepare_files
	apply_xdelta
    zip_archive
	# Final completion message
    echo "installation process complete!"
}

process_game
