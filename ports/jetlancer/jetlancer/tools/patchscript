#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"

# Redirect output and error to the log file
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Exports
export DATADIR="$GAMEDIR/assets"
export DATAFILE="game.port"
export LD_LIBRARY_PATH="/usr/lib:$GAMEDIR/lib:$GAMEDIR/tools/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export TOOLDIR="$GAMEDIR/tools"
export TMPDIR="$GAMEDIR/tmp"
export PATH="$controlfolder:$GAMEDIR/tools:$PATH"

# Permissions
chmod 666 /dev/uinput
chmod 777 "$TOOLDIR/gmKtool.py"
chmod 777 "$TOOLDIR/oggenc"
chmod 777 "$TOOLDIR/oggdec"

cd "$GAMEDIR"

remove_files() {
    # Delete unnecessary files
    rm -rf $DATADIR/*.exe $DATADIR/*.dll $DATADIR/.gitkeep
	echo "Removed unnecessary files"
    sleep 1
}

apply_xdeltas() {
# If "$DATADIR/data.win" exists and matches the checksum of the GOG or Steam versions
    if [ -f "$DATADIR/data.win" ]; then
        checksum=$(md5sum "$DATADIR/data.win" | awk '{print $1}')
		echo "patching data.win"
    
        # Checksum for the GOG version
        if [ "$checksum" = "0258cadce342712c2ffbd5fc70e0dfd7" ]; then
            $ESUDO xdelta3 -d -s $DATADIR/data.win -f $TOOLDIR/patch/gogdata.xdelta $DATADIR/game.droid && \
            rm $DATADIR/data.win
            echo "GOG data.win has been patched"
        # Checksum for the Steam version
        elif [ "$checksum" = "86045b6464bb909851634c3e34b2a82e" ]; then
            $ESUDO xdelta3 -d -s $DATADIR/data.win -f $TOOLDIR/patch/steamdata.xdelta $DATADIR/game.droid && \
            rm $DATADIR/data.win
 	        echo "Steam data.win has been patched"
        else
            echo "Error: MD5 checksum of data.win does not match any expected version."
			exit 1
        fi
    else    
        echo "Missing data.win in $DATADIR folder or game has been patched."
    fi

    # If "$DATADIR/audiogroup1.dat" exists and matches the checksum of the Steam version
    if [ -f "$DATADIR/audiogroup1.dat" ]; then
        checksum=$(md5sum "$DATADIR/audiogroup1.dat" | awk '{print $1}')
    
        # Checksum for the Steam audiogroup1.dat version
        if [ "$checksum" = "bcadc44e45f8a6caf9b5c5db538ced13" ]; then
            $ESUDO xdelta3 -d -s $DATADIR/audiogroup1.dat -f $TOOLDIR/patch/steamaudiogroup1.xdelta $DATADIR/audiogroup1patched.dat && \
            rm $DATADIR/audiogroup1.dat
            mv $DATADIR/audiogroup1patched.dat $DATADIR/audiogroup1.dat
            echo "Steam audiogroup1.dat has been patched."
        fi
    else    
        echo "Missing audiogroup1.dat in $DATADIR folder or game has been patched."
    fi
}

compress_audio() {
    echo "Compressing audio..."
    # Clear out the temporary directory
    mkdir -p "$TMPDIR"
    rm -rf $TMPDIR/*

    # Run the compression tool
    echo "Running GMTools on data and audiogroups."
    $PYTHON $TOOLDIR/gmKtool.py -vv -m 0 -r -q -1 -d "$TMPDIR" "$DATADIR/game.droid"

    if [ $? -eq 0 ]; then
        echo "Compression completed successfully."
        mv "$TMPDIR/"* "$DATADIR"
        echo "Moved compressed files to $DATADIR."
        rm -rf "$TMPDIR"
        echo "Temporary directory $TMPDIR removed."
        echo "Audio compression applied successfully."
        sleep 1
    else
        echo "Audio compression failed."
        echo "Cleaning up temporary directory $TMPDIR."
        rm -rf "$TMPDIR"
        sleep 1
    fi
	
	sleep 3
	
	# Find and compress all .ogg files in the /gamedata directory
    find "$DATADIR" -type f -name "*.ogg" | while read -r file; do
    # Create a temporary file for the compressed version
    temp_file="${file%.ogg}_temp.ogg"

    # Decode the .ogg file and encode it with the specified bitrate
    "$TOOLDIR/oggdec" -o - "$file" | "$TOOLDIR/oggenc" -q -1 -o "$temp_file" -
    if [ $? -eq 0 ]; then
        # Replace the original file with the compressed version if successful
        mv "$temp_file" "$file"
        echo "Compressed: $file to quality -1.00"
    else
        echo "Failed to compress: $file" >&2
        rm -f "$temp_file" # Clean up the temp file in case of error
    fi
    done

    echo "All .ogg files have been processed."
    sleep 3 
	
}

zip_archive() {
        zip -r -0 $DATAFILE ./assets/
        rm -rf ./assets
        mkdir -p saves
}

install_complete() {
# Create install completion flag
touch "install_completed"
echo "Installation completed successfully!"
echo "-----------------------------"
echo "Process finished at: $(date)"
}

process_game() {
    # Delete unnecessary files
    remove_files
	sleep 1
    apply_xdeltas
    sleep 1
    echo "Compressing audio..."
    compress_audio
    sleep 1
    echo "Finishing up..."
    zip_archive
    sleep 1
    install_complete
}

# Call the function
process_game